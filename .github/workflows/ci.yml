name: CI/CD Pipeline

# Only run on pushes to main (typically from merged PRs) and PRs targeting main
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Type checking
      run: npm run check-types
      
    - name: Linting
      run: npm run lint
      
    - name: Build extension
      run: npm run package
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: extension-${{ matrix.node-version }}
        path: codestate-ide-*.vsix
        retention-days: 7

  auto-tag:
    needs: build-and-test
    runs-on: ubuntu-latest
    # Only run when a PR is merged to main (not on direct pushes)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.head_commit.message, 'Merge pull request')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper tagging
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Get package version
      id: version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
    - name: Check if tag exists
      id: tag_check
      run: |
        if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create and push tag
      if: steps.tag_check.outputs.exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git tag "v${{ steps.version.outputs.version }}"
        git push origin "v${{ steps.version.outputs.version }}"
        echo "Created and pushed tag v${{ steps.version.outputs.version }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    needs: [build-and-test, auto-tag]
    runs-on: ubuntu-latest
    # Only publish when a PR is merged to main (not on direct pushes)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.head_commit.message, 'Merge pull request')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extension
      run: npm run package
      
    - name: Install vsce
      run: npm install -g vsce
      
    - name: Publish to VS Code Marketplace
      run: |
        echo "Publishing to VS Code Marketplace..."
        vsce publish --pat ${{ secrets.VSCE_TOKEN }}
      env:
        VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}

  release:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extension
      run: npm run package
      
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## CodeState IDE ${{ github.ref }}
          
          ### Changes
          - See [CHANGELOG.md](CHANGELOG.md) for detailed changes
          
          ### Installation
          1. Download the `.vsix` file from the assets below
          2. Open VS Code
          3. Go to Extensions (`Ctrl+Shift+X`)
          4. Click the "..." menu and select "Install from VSIX..."
          5. Select the downloaded file
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: codestate-ide-*.vsix
        asset_name: codestate-ide-${{ github.ref_name }}.vsix
        asset_content_type: application/octet-stream